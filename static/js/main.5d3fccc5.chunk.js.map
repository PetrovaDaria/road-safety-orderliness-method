{"version":3,"sources":["lib/helper.js","introduction/introduction.jsx","calculatePage/calculatePage.jsx","serviceWorker.js","index.js"],"names":["fourUnitsConst","Math","log","calculateEntropy","indicators","population","auto","accidents","injured","dead","units","calculateUnit","dividend","divider","accuracy","unit","round","calculateInverseUnit","console","positive","reduce","a","b","entropy","acc","share","value","toFixed","Introduction","chain","Provider","className","Node","inline","formula","this","React","Component","CalculatePage","state","components","labels","major","minor","_processLabels","Object","entries","key","processedLabels","class","with","_renderForm","Fragment","map","component","htmlFor","id","type","onChange","_onChangeInput","event","target","Number","isInteger","parseInt","setState","_hasAllValues","filter","length","_renderButtons","_renderResetButton","_renderCalculateButton","isDisabled","onClick","_calculateEntropy","disabled","_reset","_renderResult","level","_getLevel","isNaN","_renderResultTable","keys","forEach","hasResult","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d3fccc5.chunk.js","sourcesContent":["const fourUnitsConst = Math.log(4);\n\nfunction calculateEntropy(indicators) {\n    const { population, auto, accidents, injured, dead } = indicators;\n    const autoPopulationUnit = calculateUnit(auto, population);\n    const accidentsAutoUnit = calculateUnit(accidents, auto);\n    const injuredAccidentsUnit = calculateInverseUnit(injured, accidents);\n    const deadInjuredUnit = calculateUnit(dead, injured);\n\n    const units = [autoPopulationUnit, accidentsAutoUnit, injuredAccidentsUnit, deadInjuredUnit];\n    console.log(units);\n    const positive = units.reduce((a, b) => a + b, 0);\n\n    const entropy = -1 * units.reduce((acc, unit) => {\n        const share = round(unit / positive);\n        console.log(share);\n        acc += round(share * Math.log(share));\n        console.log(acc);\n        return acc;\n    }, 0);\n\n    return round(entropy / fourUnitsConst, 3);\n}\n\nfunction calculateUnit(dividend, divider, accuracy=3) {\n    const unit = Math.log(1 / (dividend / divider));\n    return round(unit, accuracy);\n}\n\nfunction calculateInverseUnit(dividend, divider, accuracy=3) {\n    const unit = Math.log(dividend / divider);\n    return round(unit, accuracy);\n}\n\nfunction round(value, accuracy=3) {\n    return +value.toFixed(accuracy);\n}\n\nexport {\n    calculateEntropy\n};\n","import React from 'react';\nimport MathJax from 'react-mathjax';\n\nimport './introduction.css';\n\nexport default class Introduction extends React.Component {\n    chain = `P \\\\rightarrow N_{Vh} \\\\rightarrow N_{RA} \\\\rightarrow N_V \\\\rightarrow N_D`;\n    render() {\n        return (\n            <MathJax.Provider>\n                <div className=\"introduction\">\n                    <p>\n                        Формирование дорожно-транспортной аварийности с позиций\n                        кибернетической процессной логики описывается\n                        четырехзвенной <MathJax.Node inline formula=\"H_n\\text{-}4\" /> причинно-следственной цепочкой:\n                    </p>\n                    <p>\n                        <MathJax.Node formula={this.chain}/>\n                    </p>\n                    <ul className=\"list\">\n                        <li className=\"list-item\">\n                            <MathJax.Node inline formula=\"P\"/> - численность населения в рамках определенной территории (от Population – население)\n                        </li>\n                        <li className=\"list-item\">\n                            <MathJax.Node inline formula=\"N_{Vh}\"/> - количество транспортных средств (ТС) в парке (от Vehicle – транспортное средство)\n                        </li>\n                        <li className=\"list-item\">\n                            <MathJax.Node inline formula=\"N_{RA}\"/> - количество ДТП, произошедших за определенный период в рамках автотранспортной системы,\n                            соответствующей  определенной территории (от Road Accidents – дорожное происшествие);\n                        </li>\n                        <li className=\"list-item\">\n                            <MathJax.Node inline formula=\"N_V\"/> - количество (для указанной системы) пострадавших в ДТП (от Victim – жертва)\n                        </li>\n                        <li className=\"list-item\">\n                            <MathJax.Node inline formula=\"N_D\"/> - количество (для указанной системы) погибших в ДТП (от Dead – погибший)\n                        </li>\n\n                    </ul>\n                </div>\n            </MathJax.Provider>\n        );\n    }\n}\n","import React from 'react';\nimport b from 'b_';\nimport './calculatePage.css';\n\nimport { calculateEntropy } from '../lib/helper';\nimport Introduction from \"../introduction/introduction\";\nimport MathJax from 'react-mathjax';\n\nexport default class CalculatePage extends React.Component {\n    state = {\n        population: '',\n        auto: '',\n        accidents: '',\n        injured: '',\n        dead: '',\n        entropy: ''\n    };\n\n    components = ['population', 'auto', 'accidents', 'injured', 'dead'];\n    labels = {\n        population: { major: 'Население', minor: 'чел.' },\n        auto: { major: 'Парк транспортных средств', minor: 'ед.' },\n        accidents: { major: 'Количество ДТП', minor: 'ед./год' },\n        injured: { major: 'Пострадавшие в ДТП', minor: 'чел./год' },\n        dead: { major: 'Погибшие в ДТП', minor: 'чел./год' }\n    };\n\n    _processLabels = () => {\n        return Object.entries(this.labels)\n            .reduce((acc, [key, { major, minor }]) => {\n            acc[key] = (\n                <span>\n                {`${major}, `}\n                    <span className='minor-text'>\n                        {minor}\n                    </span>\n                </span>\n            );\n            return acc;\n        }, {});\n    }\n\n    processedLabels = this._processLabels();\n\n    class = b.with('calculate-page');\n\n    render() {\n        const { entropy } = this.state;\n        const hasResult = entropy !== '';\n\n        return (\n            <div className={this.class()}>\n                <header className={this.class('header')}>\n                    <h1 className={this.class('title')}>\n                        Методика оценки организованности процесса обеспечения БДД на уровне субъекта Российской Федерации, города\n                    </h1>\n                    <p className={this.class('author')}>Петров А.И.</p>\n                </header>\n                <main className={this.class('main')}>\n                    <Introduction />\n                   {this._renderForm()}\n                   {this._renderButtons()}\n                   {hasResult && this._renderResult()}\n                </main>\n            </div>\n        );\n    }\n\n    _renderForm = () => {\n        return (\n            <React.Fragment>\n                <h2 className={this.class('form-title')}>Расчет относительной энтропии</h2>\n                <div className={this.class('form')}>\n                    {this.components.map(component => (\n                        <React.Fragment\n                            key={component}\n                        >\n                            <label htmlFor={component}>\n                                {this.processedLabels[component]}\n                            </label>\n                            <input\n                                id={component}\n                                type=\"text\"\n                                onChange={this._onChangeInput(component)}\n                                value={this.state[component]}\n                            />\n                        </React.Fragment>\n                    ))}\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    _onChangeInput = type => event => {\n        const value = event.target.value;\n        const isInt = Number.isInteger(parseInt(value, 10));\n        const isPositive = value > 0;\n        const isEmpty = value === '';\n        if ((isInt && isPositive) || isEmpty) {\n            this.setState({ [type]: value });\n        }\n    }\n\n    _hasAllValues = () => {\n        return this.components.filter(component => this.state[component] === '').length === 0;\n    }\n\n    _renderButtons = () => {\n        return (\n            <div className={this.class('buttons')}>\n                {this._renderResetButton()}\n                {this._renderCalculateButton()}\n            </div>\n        )\n    }\n\n    _renderCalculateButton = () => {\n        const isDisabled = !this._hasAllValues();\n\n        return (\n            <button\n                className={this.class('btn')}\n                onClick={this._calculateEntropy}\n                disabled={isDisabled}\n            >\n                Рассчитать\n            </button>\n        );\n    }\n\n    _renderResetButton = () => {\n        return (\n            <button\n                className={this.class('btn')}\n                onClick={this._reset}\n            >\n                Сбросить\n            </button>\n        );\n    }\n\n    _renderResult = () => {\n        const { entropy } = this.state;\n        const level = this._getLevel(entropy);\n        return Number.isNaN(entropy)\n            ?\n            (\n                <div className={this.class('result')}>\n                    Невозможно вычислить\n                </div>\n            )\n            :\n        (\n            <React.Fragment>\n                <div className={this.class('result')}>\n                    {`Относительная энтропия равна ${entropy}. Это `}\n                    <span className=\"major-text\">{`${level} `}</span>\n                    (для 2019 г.) уровень организованности систем ОБДД.\n                </div>\n                {this._renderResultTable()}\n            </React.Fragment>\n        );\n    }\n\n    _renderResultTable = () => {\n        return (\n            <React.Fragment>\n                <h3 className={this.class('result-table-title')}>Уровень организованности систем ОБДД (для 2019 г.)</h3>\n                <MathJax.Provider>\n                    <div className={this.class('result-table')}>\n                        <span>Высокий</span>\n                        <span>Средний</span>\n                        <span>Низкий</span>\n                        <MathJax.Node formula={'H_n > 0.7'} />\n                        <MathJax.Node formula={'0.7 \\\\leq H_n \\\\leq 0.74'} />\n                        <MathJax.Node formula={'H_n > 0.74'} />\n                    </div>\n                </MathJax.Provider>\n            </React.Fragment>\n        );\n    }\n\n    _getLevel = entropy => {\n        if (entropy > 0.741) {\n            return 'относительно низкий';\n        }\n        if (entropy < 0.7) {\n            return 'относительно высокий';\n        }\n        return 'средний';\n    }\n\n    _reset = () => {\n        Object.keys(this.state).forEach(key => {\n            this.setState({ [key]: '' });\n        })\n    }\n\n    _calculateEntropy = () => {\n        const entropy = calculateEntropy(this.state);\n\n        this.setState({ entropy });\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CalculatePage from './calculatePage/calculatePage.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<CalculatePage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}